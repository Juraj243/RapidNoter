package com.example.juraj.note.data;

import org.greenrobot.greendao.annotation.*;

import com.example.juraj.note.data.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "CART_ITEMS".
 */
@Entity(active = true, nameInDb = "CART_ITEMS")
public class CartItem {

    @Id
    private Long id;
    private String name;
    private java.util.Date date;
    private long cartId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CartItemDao myDao;

    @ToOne(joinProperty = "cartId")
    private Cart cart;

    @Generated
    private transient Long cart__resolvedKey;

    @Generated
    public CartItem() {
    }

    public CartItem(Long id) {
        this.id = id;
    }

    @Generated
    public CartItem(Long id, String name, java.util.Date date, long cartId) {
        this.id = id;
        this.name = name;
        this.date = date;
        this.cartId = cartId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCartItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public long getCartId() {
        return cartId;
    }

    public void setCartId(long cartId) {
        this.cartId = cartId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Cart getCart() {
        long __key = this.cartId;
        if (cart__resolvedKey == null || !cart__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CartDao targetDao = daoSession.getCartDao();
            Cart cartNew = targetDao.load(__key);
            synchronized (this) {
                cart = cartNew;
            	cart__resolvedKey = __key;
            }
        }
        return cart;
    }

    @Generated
    public void setCart(Cart cart) {
        if (cart == null) {
            throw new DaoException("To-one property 'cartId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.cart = cart;
            cartId = cart.getId();
            cart__resolvedKey = cartId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
